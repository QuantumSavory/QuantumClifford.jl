@testitem "Apply Inv" begin
    @testset "Apply Inv" begin
       
        @test apply_inv!(S"X", sHadamard(1)) == apply!(S"X", inv(CliffordOperator(sHadamard(1), 1)))
        @test apply_inv!(S"Y", sHadamard(1)) == apply!(S"Y", inv(CliffordOperator(sHadamard(1), 1)))
        @test apply_inv!(S"Z", sHadamard(1)) == apply!(S"Z", inv(CliffordOperator(sHadamard(1), 1)))

        @test apply_inv!(S"X", sHadamardXY(1)) == apply!(S"X", inv(CliffordOperator(sHadamardXY(1), 1)))
        @test apply_inv!(S"Y", sHadamardXY(1)) == apply!(S"Y", inv(CliffordOperator(sHadamardXY(1), 1)))
        @test apply_inv!(S"Z", sHadamardXY(1)) == apply!(S"Z", inv(CliffordOperator(sHadamardXY(1), 1)))

        @test apply_inv!(S"X", sHadamardYZ(1)) == apply!(S"X", inv(CliffordOperator(sHadamardYZ(1), 1)))
        @test apply_inv!(S"Y", sHadamardYZ(1)) == apply!(S"Y", inv(CliffordOperator(sHadamardYZ(1), 1)))
        @test apply_inv!(S"Z", sHadamardYZ(1)) == apply!(S"Z", inv(CliffordOperator(sHadamardYZ(1), 1)))

        @test apply_inv!(S"X", sPhase(1)) == apply!(S"X", inv(CliffordOperator(sPhase(1), 1)))
        @test apply_inv!(S"Y", sPhase(1)) == apply!(S"Y", inv(CliffordOperator(sPhase(1), 1)))
        @test apply_inv!(S"Z", sPhase(1)) == apply!(S"Z", inv(CliffordOperator(sPhase(1), 1)))

        @test apply_inv!(S"X", sInvPhase(1)) == apply!(S"X", inv(CliffordOperator(sInvPhase(1), 1)))
        @test apply_inv!(S"Y", sInvPhase(1)) == apply!(S"Y", inv(CliffordOperator(sInvPhase(1), 1)))
        @test apply_inv!(S"Z", sInvPhase(1)) == apply!(S"Z", inv(CliffordOperator(sInvPhase(1), 1)))

        @test apply_inv!(S"X", sX(1)) == apply!(S"X", inv(CliffordOperator(sX(1), 1)))
        @test apply_inv!(S"Y", sX(1)) == apply!(S"Y", inv(CliffordOperator(sX(1), 1)))
        @test apply_inv!(S"Z", sX(1)) == apply!(S"Z", inv(CliffordOperator(sX(1), 1)))

        @test apply_inv!(S"X", sY(1)) == apply!(S"X", inv(CliffordOperator(sY(1), 1)))
        @test apply_inv!(S"Y", sY(1)) == apply!(S"Y", inv(CliffordOperator(sY(1), 1)))
        @test apply_inv!(S"Z", sY(1)) == apply!(S"Z", inv(CliffordOperator(sY(1), 1)))

        @test apply_inv!(S"X", sZ(1)) == apply!(S"X", inv(CliffordOperator(sZ(1), 1)))
        @test apply_inv!(S"Y", sZ(1)) == apply!(S"Y", inv(CliffordOperator(sZ(1), 1)))
        @test apply_inv!(S"Z", sZ(1)) == apply!(S"Z", inv(CliffordOperator(sZ(1), 1)))

        @test apply_inv!(S"X", sSQRTX(1)) == apply!(S"X", inv(CliffordOperator(sSQRTX(1), 1)))
        @test apply_inv!(S"Y", sSQRTX(1)) == apply!(S"Y", inv(CliffordOperator(sSQRTX(1), 1)))
        @test apply_inv!(S"Z", sSQRTX(1)) == apply!(S"Z", inv(CliffordOperator(sSQRTX(1), 1)))

        @test apply_inv!(S"X", sInvSQRTX(1)) == apply!(S"X", inv(CliffordOperator(sInvSQRTX(1), 1)))
        @test apply_inv!(S"Y", sInvSQRTX(1)) == apply!(S"Y", inv(CliffordOperator(sInvSQRTX(1), 1)))
        @test apply_inv!(S"Z", sInvSQRTX(1)) == apply!(S"Z", inv(CliffordOperator(sInvSQRTX(1), 1)))

        @test apply_inv!(S"X", sSQRTY(1)) == apply!(S"X", inv(CliffordOperator(sSQRTY(1), 1)))
        @test apply_inv!(S"Y", sSQRTY(1)) == apply!(S"Y", inv(CliffordOperator(sSQRTY(1), 1)))
        @test apply_inv!(S"Z", sSQRTY(1)) == apply!(S"Z", inv(CliffordOperator(sSQRTY(1), 1)))

        @test apply_inv!(S"X", sInvSQRTY(1)) == apply!(S"X", inv(CliffordOperator(sInvSQRTY(1), 1)))
        @test apply_inv!(S"Y", sInvSQRTY(1)) == apply!(S"Y", inv(CliffordOperator(sInvSQRTY(1), 1)))
        @test apply_inv!(S"Z", sInvSQRTY(1)) == apply!(S"Z", inv(CliffordOperator(sInvSQRTY(1), 1)))

        @test apply_inv!(S"X", sCXYZ(1)) == apply!(S"X", inv(CliffordOperator(sCXYZ(1), 1)))
        @test apply_inv!(S"Y", sCXYZ(1)) == apply!(S"Y", inv(CliffordOperator(sCXYZ(1), 1)))
        @test apply_inv!(S"Z", sCXYZ(1)) == apply!(S"Z", inv(CliffordOperator(sCXYZ(1), 1)))

        @test apply_inv!(S"X", sCZYX(1)) == apply!(S"X", inv(CliffordOperator(sCZYX(1), 1)))
        @test apply_inv!(S"Y", sCZYX(1)) == apply!(S"Y", inv(CliffordOperator(sCZYX(1), 1)))
        @test apply_inv!(S"Z", sCZYX(1)) == apply!(S"Z", inv(CliffordOperator(sCZYX(1), 1)))

    end

    @testset "Apply Inv two-qubit" begin
        
        @test apply_inv!(S"XX", sSWAP(1, 2)) == apply!(S"XX", inv(CliffordOperator(sSWAP(1, 2), 2)))
        @test apply_inv!(S"XY", sSWAP(1, 2)) == apply!(S"XY", inv(CliffordOperator(sSWAP(1, 2), 2)))
        @test apply_inv!(S"XZ", sSWAP(1, 2)) == apply!(S"XZ", inv(CliffordOperator(sSWAP(1, 2), 2)))
        @test apply_inv!(S"YX", sSWAP(1, 2)) == apply!(S"YX", inv(CliffordOperator(sSWAP(1, 2), 2)))
        @test apply_inv!(S"YY", sSWAP(1, 2)) == apply!(S"YY", inv(CliffordOperator(sSWAP(1, 2), 2)))
        @test apply_inv!(S"YZ", sSWAP(1, 2)) == apply!(S"YZ", inv(CliffordOperator(sSWAP(1, 2), 2)))
        @test apply_inv!(S"ZX", sSWAP(1, 2)) == apply!(S"ZX", inv(CliffordOperator(sSWAP(1, 2), 2)))
        @test apply_inv!(S"ZY", sSWAP(1, 2)) == apply!(S"ZY", inv(CliffordOperator(sSWAP(1, 2), 2)))
        @test apply_inv!(S"ZZ", sSWAP(1, 2)) == apply!(S"ZZ", inv(CliffordOperator(sSWAP(1, 2), 2)))

        @test apply_inv!(S"XX", sSWAPCX(1, 2)) == apply!(S"XX", inv(CliffordOperator(sSWAPCX(1, 2), 2)))
        @test apply_inv!(S"XY", sSWAPCX(1, 2)) == apply!(S"XY", inv(CliffordOperator(sSWAPCX(1, 2), 2)))
        @test apply_inv!(S"XZ", sSWAPCX(1, 2)) == apply!(S"XZ", inv(CliffordOperator(sSWAPCX(1, 2), 2)))
        @test apply_inv!(S"YX", sSWAPCX(1, 2)) == apply!(S"YX", inv(CliffordOperator(sSWAPCX(1, 2), 2)))
        @test apply_inv!(S"YY", sSWAPCX(1, 2)) == apply!(S"YY", inv(CliffordOperator(sSWAPCX(1, 2), 2)))
        @test apply_inv!(S"YZ", sSWAPCX(1, 2)) == apply!(S"YZ", inv(CliffordOperator(sSWAPCX(1, 2), 2)))
        @test apply_inv!(S"ZX", sSWAPCX(1, 2)) == apply!(S"ZX", inv(CliffordOperator(sSWAPCX(1, 2), 2)))
        @test apply_inv!(S"ZY", sSWAPCX(1, 2)) == apply!(S"ZY", inv(CliffordOperator(sSWAPCX(1, 2), 2)))
        @test apply_inv!(S"ZZ", sSWAPCX(1, 2)) == apply!(S"ZZ", inv(CliffordOperator(sSWAPCX(1, 2), 2)))

        @test apply_inv!(S"XX", sInvSWAPCX(1, 2)) == apply!(S"XX", inv(CliffordOperator(sInvSWAPCX(1, 2), 2)))
        @test apply_inv!(S"XY", sInvSWAPCX(1, 2)) == apply!(S"XY", inv(CliffordOperator(sInvSWAPCX(1, 2), 2)))
        @test apply_inv!(S"XZ", sInvSWAPCX(1, 2)) == apply!(S"XZ", inv(CliffordOperator(sInvSWAPCX(1, 2), 2)))
        @test apply_inv!(S"YX", sInvSWAPCX(1, 2)) == apply!(S"YX", inv(CliffordOperator(sInvSWAPCX(1, 2), 2)))
        @test apply_inv!(S"YY", sInvSWAPCX(1, 2)) == apply!(S"YY", inv(CliffordOperator(sInvSWAPCX(1, 2), 2)))
        @test apply_inv!(S"YZ", sInvSWAPCX(1, 2)) == apply!(S"YZ", inv(CliffordOperator(sInvSWAPCX(1, 2), 2)))
        @test apply_inv!(S"ZX", sInvSWAPCX(1, 2)) == apply!(S"ZX", inv(CliffordOperator(sInvSWAPCX(1, 2), 2)))
        @test apply_inv!(S"ZY", sInvSWAPCX(1, 2)) == apply!(S"ZY", inv(CliffordOperator(sInvSWAPCX(1, 2), 2)))
        @test apply_inv!(S"ZZ", sInvSWAPCX(1, 2)) == apply!(S"ZZ", inv(CliffordOperator(sInvSWAPCX(1, 2), 2)))

        @test apply_inv!(S"XX", sISWAP(1, 2)) == apply!(S"XX", inv(CliffordOperator(sISWAP(1, 2), 2)))
        @test apply_inv!(S"XY", sISWAP(1, 2)) == apply!(S"XY", inv(CliffordOperator(sISWAP(1, 2), 2)))
        @test apply_inv!(S"XZ", sISWAP(1, 2)) == apply!(S"XZ", inv(CliffordOperator(sISWAP(1, 2), 2)))
        @test apply_inv!(S"YX", sISWAP(1, 2)) == apply!(S"YX", inv(CliffordOperator(sISWAP(1, 2), 2)))
        @test apply_inv!(S"YY", sISWAP(1, 2)) == apply!(S"YY", inv(CliffordOperator(sISWAP(1, 2), 2)))
        @test apply_inv!(S"YZ", sISWAP(1, 2)) == apply!(S"YZ", inv(CliffordOperator(sISWAP(1, 2), 2)))
        @test apply_inv!(S"ZX", sISWAP(1, 2)) == apply!(S"ZX", inv(CliffordOperator(sISWAP(1, 2), 2)))
        @test apply_inv!(S"ZY", sISWAP(1, 2)) == apply!(S"ZY", inv(CliffordOperator(sISWAP(1, 2), 2)))
        @test apply_inv!(S"ZZ", sISWAP(1, 2)) == apply!(S"ZZ", inv(CliffordOperator(sISWAP(1, 2), 2)))

        @test apply_inv!(S"XX", sInvISWAP(1, 2)) == apply!(S"XX", inv(CliffordOperator(sInvISWAP(1, 2), 2)))
        @test apply_inv!(S"XY", sInvISWAP(1, 2)) == apply!(S"XY", inv(CliffordOperator(sInvISWAP(1, 2), 2)))
        @test apply_inv!(S"XZ", sInvISWAP(1, 2)) == apply!(S"XZ", inv(CliffordOperator(sInvISWAP(1, 2), 2)))
        @test apply_inv!(S"YX", sInvISWAP(1, 2)) == apply!(S"YX", inv(CliffordOperator(sInvISWAP(1, 2), 2)))
        @test apply_inv!(S"YY", sInvISWAP(1, 2)) == apply!(S"YY", inv(CliffordOperator(sInvISWAP(1, 2), 2)))
        @test apply_inv!(S"YZ", sInvISWAP(1, 2)) == apply!(S"YZ", inv(CliffordOperator(sInvISWAP(1, 2), 2)))
        @test apply_inv!(S"ZX", sInvISWAP(1, 2)) == apply!(S"ZX", inv(CliffordOperator(sInvISWAP(1, 2), 2)))
        @test apply_inv!(S"ZY", sInvISWAP(1, 2)) == apply!(S"ZY", inv(CliffordOperator(sInvISWAP(1, 2), 2)))
        @test apply_inv!(S"ZZ", sInvISWAP(1, 2)) == apply!(S"ZZ", inv(CliffordOperator(sInvISWAP(1, 2), 2)))

        @test apply_inv!(S"XX", sCZSWAP(1, 2)) == apply!(S"XX", inv(CliffordOperator(sCZSWAP(1, 2), 2)))
        @test apply_inv!(S"XY", sCZSWAP(1, 2)) == apply!(S"XY", inv(CliffordOperator(sCZSWAP(1, 2), 2)))
        @test apply_inv!(S"XZ", sCZSWAP(1, 2)) == apply!(S"XZ", inv(CliffordOperator(sCZSWAP(1, 2), 2)))
        @test apply_inv!(S"YX", sCZSWAP(1, 2)) == apply!(S"YX", inv(CliffordOperator(sCZSWAP(1, 2), 2)))
        @test apply_inv!(S"YY", sCZSWAP(1, 2)) == apply!(S"YY", inv(CliffordOperator(sCZSWAP(1, 2), 2)))
        @test apply_inv!(S"YZ", sCZSWAP(1, 2)) == apply!(S"YZ", inv(CliffordOperator(sCZSWAP(1, 2), 2)))
        @test apply_inv!(S"ZX", sCZSWAP(1, 2)) == apply!(S"ZX", inv(CliffordOperator(sCZSWAP(1, 2), 2)))
        @test apply_inv!(S"ZY", sCZSWAP(1, 2)) == apply!(S"ZY", inv(CliffordOperator(sCZSWAP(1, 2), 2)))
        @test apply_inv!(S"ZZ", sCZSWAP(1, 2)) == apply!(S"ZZ", inv(CliffordOperator(sCZSWAP(1, 2), 2)))

        @test apply_inv!(S"XX", sCXSWAP(1, 2)) == apply!(S"XX", inv(CliffordOperator(sCXSWAP(1, 2), 2)))
        @test apply_inv!(S"XY", sCXSWAP(1, 2)) == apply!(S"XY", inv(CliffordOperator(sCXSWAP(1, 2), 2)))
        @test apply_inv!(S"XZ", sCXSWAP(1, 2)) == apply!(S"XZ", inv(CliffordOperator(sCXSWAP(1, 2), 2)))
        @test apply_inv!(S"YX", sCXSWAP(1, 2)) == apply!(S"YX", inv(CliffordOperator(sCXSWAP(1, 2), 2)))
        @test apply_inv!(S"YY", sCXSWAP(1, 2)) == apply!(S"YY", inv(CliffordOperator(sCXSWAP(1, 2), 2)))
        @test apply_inv!(S"YZ", sCXSWAP(1, 2)) == apply!(S"YZ", inv(CliffordOperator(sCXSWAP(1, 2), 2)))
        @test apply_inv!(S"ZX", sCXSWAP(1, 2)) == apply!(S"ZX", inv(CliffordOperator(sCXSWAP(1, 2), 2)))
        @test apply_inv!(S"ZY", sCXSWAP(1, 2)) == apply!(S"ZY", inv(CliffordOperator(sCXSWAP(1, 2), 2)))
        @test apply_inv!(S"ZZ", sCXSWAP(1, 2)) == apply!(S"ZZ", inv(CliffordOperator(sCXSWAP(1, 2), 2)))

        @test apply_inv!(S"XX", sCNOT(1, 2)) == apply!(S"XX", inv(CliffordOperator(sCNOT(1, 2), 2)))
        @test apply_inv!(S"XY", sCNOT(1, 2)) == apply!(S"XY", inv(CliffordOperator(sCNOT(1, 2), 2)))
        @test apply_inv!(S"XZ", sCNOT(1, 2)) == apply!(S"XZ", inv(CliffordOperator(sCNOT(1, 2), 2)))
        @test apply_inv!(S"YX", sCNOT(1, 2)) == apply!(S"YX", inv(CliffordOperator(sCNOT(1, 2), 2)))
        @test apply_inv!(S"YY", sCNOT(1, 2)) == apply!(S"YY", inv(CliffordOperator(sCNOT(1, 2), 2)))
        @test apply_inv!(S"YZ", sCNOT(1, 2)) == apply!(S"YZ", inv(CliffordOperator(sCNOT(1, 2), 2)))
        @test apply_inv!(S"ZX", sCNOT(1, 2)) == apply!(S"ZX", inv(CliffordOperator(sCNOT(1, 2), 2)))
        @test apply_inv!(S"ZY", sCNOT(1, 2)) == apply!(S"ZY", inv(CliffordOperator(sCNOT(1, 2), 2)))
        @test apply_inv!(S"ZZ", sCNOT(1, 2)) == apply!(S"ZZ", inv(CliffordOperator(sCNOT(1, 2), 2)))

        @test apply_inv!(S"XX", sCPHASE(1, 2)) == apply!(S"XX", inv(CliffordOperator(sCPHASE(1, 2), 2)))
        @test apply_inv!(S"XY", sCPHASE(1, 2)) == apply!(S"XY", inv(CliffordOperator(sCPHASE(1, 2), 2)))
        @test apply_inv!(S"XZ", sCPHASE(1, 2)) == apply!(S"XZ", inv(CliffordOperator(sCPHASE(1, 2), 2)))
        @test apply_inv!(S"YX", sCPHASE(1, 2)) == apply!(S"YX", inv(CliffordOperator(sCPHASE(1, 2), 2)))
        @test apply_inv!(S"YY", sCPHASE(1, 2)) == apply!(S"YY", inv(CliffordOperator(sCPHASE(1, 2), 2)))
        @test apply_inv!(S"YZ", sCPHASE(1, 2)) == apply!(S"YZ", inv(CliffordOperator(sCPHASE(1, 2), 2)))
        @test apply_inv!(S"ZX", sCPHASE(1, 2)) == apply!(S"ZX", inv(CliffordOperator(sCPHASE(1, 2), 2)))
        @test apply_inv!(S"ZY", sCPHASE(1, 2)) == apply!(S"ZY", inv(CliffordOperator(sCPHASE(1, 2), 2)))
        @test apply_inv!(S"ZZ", sCPHASE(1, 2)) == apply!(S"ZZ", inv(CliffordOperator(sCPHASE(1, 2), 2)))

        @test apply_inv!(S"XX", sZCX(1, 2)) == apply!(S"XX", inv(CliffordOperator(sZCX(1, 2), 2)))
        @test apply_inv!(S"XY", sZCX(1, 2)) == apply!(S"XY", inv(CliffordOperator(sZCX(1, 2), 2)))
        @test apply_inv!(S"XZ", sZCX(1, 2)) == apply!(S"XZ", inv(CliffordOperator(sZCX(1, 2), 2)))
        @test apply_inv!(S"YX", sZCX(1, 2)) == apply!(S"YX", inv(CliffordOperator(sZCX(1, 2), 2)))
        @test apply_inv!(S"YY", sZCX(1, 2)) == apply!(S"YY", inv(CliffordOperator(sZCX(1, 2), 2)))
        @test apply_inv!(S"YZ", sZCX(1, 2)) == apply!(S"YZ", inv(CliffordOperator(sZCX(1, 2), 2)))
        @test apply_inv!(S"ZX", sZCX(1, 2)) == apply!(S"ZX", inv(CliffordOperator(sZCX(1, 2), 2)))
        @test apply_inv!(S"ZY", sZCX(1, 2)) == apply!(S"ZY", inv(CliffordOperator(sZCX(1, 2), 2)))
        @test apply_inv!(S"ZZ", sZCX(1, 2)) == apply!(S"ZZ", inv(CliffordOperator(sZCX(1, 2), 2)))
        
        @test apply_inv!(S"XX", sZCY(1, 2)) == apply!(S"XX", inv(CliffordOperator(sZCY(1, 2), 2)))
        @test apply_inv!(S"XY", sZCY(1, 2)) == apply!(S"XY", inv(CliffordOperator(sZCY(1, 2), 2)))
        @test apply_inv!(S"XZ", sZCY(1, 2)) == apply!(S"XZ", inv(CliffordOperator(sZCY(1, 2), 2)))
        @test apply_inv!(S"YX", sZCY(1, 2)) == apply!(S"YX", inv(CliffordOperator(sZCY(1, 2), 2)))
        @test apply_inv!(S"YY", sZCY(1, 2)) == apply!(S"YY", inv(CliffordOperator(sZCY(1, 2), 2)))
        @test apply_inv!(S"YZ", sZCY(1, 2)) == apply!(S"YZ", inv(CliffordOperator(sZCY(1, 2), 2)))
        @test apply_inv!(S"ZX", sZCY(1, 2)) == apply!(S"ZX", inv(CliffordOperator(sZCY(1, 2), 2)))
        @test apply_inv!(S"ZY", sZCY(1, 2)) == apply!(S"ZY", inv(CliffordOperator(sZCY(1, 2), 2)))
        @test apply_inv!(S"ZZ", sZCY(1, 2)) == apply!(S"ZZ", inv(CliffordOperator(sZCY(1, 2), 2)))

        @test apply_inv!(S"XX", sZCZ(1, 2)) == apply!(S"XX", inv(CliffordOperator(sZCZ(1, 2), 2)))
        @test apply_inv!(S"XY", sZCZ(1, 2)) == apply!(S"XY", inv(CliffordOperator(sZCZ(1, 2), 2)))
        @test apply_inv!(S"XZ", sZCZ(1, 2)) == apply!(S"XZ", inv(CliffordOperator(sZCZ(1, 2), 2)))
        @test apply_inv!(S"YX", sZCZ(1, 2)) == apply!(S"YX", inv(CliffordOperator(sZCZ(1, 2), 2)))
        @test apply_inv!(S"YY", sZCZ(1, 2)) == apply!(S"YY", inv(CliffordOperator(sZCZ(1, 2), 2)))
        @test apply_inv!(S"YZ", sZCZ(1, 2)) == apply!(S"YZ", inv(CliffordOperator(sZCZ(1, 2), 2)))
        @test apply_inv!(S"ZX", sZCZ(1, 2)) == apply!(S"ZX", inv(CliffordOperator(sZCZ(1, 2), 2)))
        @test apply_inv!(S"ZY", sZCZ(1, 2)) == apply!(S"ZY", inv(CliffordOperator(sZCZ(1, 2), 2)))
        @test apply_inv!(S"ZZ", sZCZ(1, 2)) == apply!(S"ZZ", inv(CliffordOperator(sZCZ(1, 2), 2)))

        @test apply_inv!(S"XX", sXCX(1, 2)) == apply!(S"XX", inv(CliffordOperator(sXCX(1, 2), 2)))
        @test apply_inv!(S"XY", sXCX(1, 2)) == apply!(S"XY", inv(CliffordOperator(sXCX(1, 2), 2)))        
        @test apply_inv!(S"XZ", sXCX(1, 2)) == apply!(S"XZ", inv(CliffordOperator(sXCX(1, 2), 2)))
        @test apply_inv!(S"YX", sXCX(1, 2)) == apply!(S"YX", inv(CliffordOperator(sXCX(1, 2), 2)))
        @test apply_inv!(S"YY", sXCX(1, 2)) == apply!(S"YY", inv(CliffordOperator(sXCX(1, 2), 2)))
        @test apply_inv!(S"YZ", sXCX(1, 2)) == apply!(S"YZ", inv(CliffordOperator(sXCX(1, 2), 2)))
        @test apply_inv!(S"ZX", sXCX(1, 2)) == apply!(S"ZX", inv(CliffordOperator(sXCX(1, 2), 2)))
        @test apply_inv!(S"ZY", sXCX(1, 2)) == apply!(S"ZY", inv(CliffordOperator(sXCX(1, 2), 2)))
        @test apply_inv!(S"ZZ", sXCX(1, 2)) == apply!(S"ZZ", inv(CliffordOperator(sXCX(1, 2), 2)))

        @test apply_inv!(S"XX", sXCY(1, 2)) == apply!(S"XX", inv(CliffordOperator(sXCY(1, 2), 2)))
        @test apply_inv!(S"XY", sXCY(1, 2)) == apply!(S"XY", inv(CliffordOperator(sXCY(1, 2), 2)))
        @test apply_inv!(S"XZ", sXCY(1, 2)) == apply!(S"XZ", inv(CliffordOperator(sXCY(1, 2), 2)))
        @test apply_inv!(S"YX", sXCY(1, 2)) == apply!(S"YX", inv(CliffordOperator(sXCY(1, 2), 2)))
        @test apply_inv!(S"YY", sXCY(1, 2)) == apply!(S"YY", inv(CliffordOperator(sXCY(1, 2), 2)))
        @test apply_inv!(S"YZ", sXCY(1, 2)) == apply!(S"YZ", inv(CliffordOperator(sXCY(1, 2), 2)))
        @test apply_inv!(S"ZX", sXCY(1, 2)) == apply!(S"ZX", inv(CliffordOperator(sXCY(1, 2), 2)))
        @test apply_inv!(S"ZY", sXCY(1, 2)) == apply!(S"ZY", inv(CliffordOperator(sXCY(1, 2), 2)))
        @test apply_inv!(S"ZZ", sXCY(1, 2)) == apply!(S"ZZ", inv(CliffordOperator(sXCY(1, 2), 2)))

        @test apply_inv!(S"XX", sXCZ(1, 2)) == apply!(S"XX", inv(CliffordOperator(sXCZ(1, 2), 2)))
        @test apply_inv!(S"XY", sXCZ(1, 2)) == apply!(S"XY", inv(CliffordOperator(sXCZ(1, 2), 2)))
        @test apply_inv!(S"XZ", sXCZ(1, 2)) == apply!(S"XZ", inv(CliffordOperator(sXCZ(1, 2), 2)))
        @test apply_inv!(S"YX", sXCZ(1, 2)) == apply!(S"YX", inv(CliffordOperator(sXCZ(1, 2), 2)))
        @test apply_inv!(S"YY", sXCZ(1, 2)) == apply!(S"YY", inv(CliffordOperator(sXCZ(1, 2), 2)))
        @test apply_inv!(S"YZ", sXCZ(1, 2)) == apply!(S"YZ", inv(CliffordOperator(sXCZ(1, 2), 2)))
        @test apply_inv!(S"ZX", sXCZ(1, 2)) == apply!(S"ZX", inv(CliffordOperator(sXCZ(1, 2), 2)))
        @test apply_inv!(S"ZY", sXCZ(1, 2)) == apply!(S"ZY", inv(CliffordOperator(sXCZ(1, 2), 2)))
        @test apply_inv!(S"ZZ", sXCZ(1, 2)) == apply!(S"ZZ", inv(CliffordOperator(sXCZ(1, 2), 2)))

        @test apply_inv!(S"XX", sYCX(1, 2)) == apply!(S"XX", inv(CliffordOperator(sYCX(1, 2), 2)))
        @test apply_inv!(S"XY", sYCX(1, 2)) == apply!(S"XY", inv(CliffordOperator(sYCX(1, 2), 2)))
        @test apply_inv!(S"XZ", sYCX(1, 2)) == apply!(S"XZ", inv(CliffordOperator(sYCX(1, 2), 2)))
        @test apply_inv!(S"YX", sYCX(1, 2)) == apply!(S"YX", inv(CliffordOperator(sYCX(1, 2), 2)))
        @test apply_inv!(S"YY", sYCX(1, 2)) == apply!(S"YY", inv(CliffordOperator(sYCX(1, 2), 2)))
        @test apply_inv!(S"YZ", sYCX(1, 2)) == apply!(S"YZ", inv(CliffordOperator(sYCX(1, 2), 2)))
        @test apply_inv!(S"ZX", sYCX(1, 2)) == apply!(S"ZX", inv(CliffordOperator(sYCX(1, 2), 2)))
        @test apply_inv!(S"ZY", sYCX(1, 2)) == apply!(S"ZY", inv(CliffordOperator(sYCX(1, 2), 2)))
        @test apply_inv!(S"ZZ", sYCX(1, 2)) == apply!(S"ZZ", inv(CliffordOperator(sYCX(1, 2), 2)))

        @test apply_inv!(S"XX", sYCY(1, 2)) == apply!(S"XX", inv(CliffordOperator(sYCY(1, 2), 2)))
        @test apply_inv!(S"XY", sYCY(1, 2)) == apply!(S"XY", inv(CliffordOperator(sYCY(1, 2), 2)))
        @test apply_inv!(S"XZ", sYCY(1, 2)) == apply!(S"XZ", inv(CliffordOperator(sYCY(1, 2), 2)))
        @test apply_inv!(S"YX", sYCY(1, 2)) == apply!(S"YX", inv(CliffordOperator(sYCY(1, 2), 2)))
        @test apply_inv!(S"YY", sYCY(1, 2)) == apply!(S"YY", inv(CliffordOperator(sYCY(1, 2), 2)))
        @test apply_inv!(S"YZ", sYCY(1, 2)) == apply!(S"YZ", inv(CliffordOperator(sYCY(1, 2), 2)))
        @test apply_inv!(S"ZX", sYCY(1, 2)) == apply!(S"ZX", inv(CliffordOperator(sYCY(1, 2), 2)))
        @test apply_inv!(S"ZY", sYCY(1, 2)) == apply!(S"ZY", inv(CliffordOperator(sYCY(1, 2), 2)))
        @test apply_inv!(S"ZZ", sYCY(1, 2)) == apply!(S"ZZ", inv(CliffordOperator(sYCY(1, 2), 2)))

        @test apply_inv!(S"XX", sYCZ(1, 2)) == apply!(S"XX", inv(CliffordOperator(sYCZ(1, 2), 2)))
        @test apply_inv!(S"XY", sYCZ(1, 2)) == apply!(S"XY", inv(CliffordOperator(sYCZ(1, 2), 2)))
        @test apply_inv!(S"XZ", sYCZ(1, 2)) == apply!(S"XZ", inv(CliffordOperator(sYCZ(1, 2), 2)))
        @test apply_inv!(S"YX", sYCZ(1, 2)) == apply!(S"YX", inv(CliffordOperator(sYCZ(1, 2), 2)))
        @test apply_inv!(S"YY", sYCZ(1, 2)) == apply!(S"YY", inv(CliffordOperator(sYCZ(1, 2), 2)))
        @test apply_inv!(S"YZ", sYCZ(1, 2)) == apply!(S"YZ", inv(CliffordOperator(sYCZ(1, 2), 2)))
        @test apply_inv!(S"ZX", sYCZ(1, 2)) == apply!(S"ZX", inv(CliffordOperator(sYCZ(1, 2), 2)))
        @test apply_inv!(S"ZY", sYCZ(1, 2)) == apply!(S"ZY", inv(CliffordOperator(sYCZ(1, 2), 2)))
        @test apply_inv!(S"ZZ", sYCZ(1, 2)) == apply!(S"ZZ", inv(CliffordOperator(sYCZ(1, 2), 2)))

        @test apply_inv!(S"XX", sZCrY(1, 2)) == apply!(S"XX", inv(CliffordOperator(sZCrY(1, 2), 2)))
        @test apply_inv!(S"XY", sZCrY(1, 2)) == apply!(S"XY", inv(CliffordOperator(sZCrY(1, 2), 2)))
        @test apply_inv!(S"XZ", sZCrY(1, 2)) == apply!(S"XZ", inv(CliffordOperator(sZCrY(1, 2), 2)))
        @test apply_inv!(S"YX", sZCrY(1, 2)) == apply!(S"YX", inv(CliffordOperator(sZCrY(1, 2), 2)))
        @test apply_inv!(S"YY", sZCrY(1, 2)) == apply!(S"YY", inv(CliffordOperator(sZCrY(1, 2), 2)))
        @test apply_inv!(S"YZ", sZCrY(1, 2)) == apply!(S"YZ", inv(CliffordOperator(sZCrY(1, 2), 2)))
        @test apply_inv!(S"ZX", sZCrY(1, 2)) == apply!(S"ZX", inv(CliffordOperator(sZCrY(1, 2), 2)))
        @test apply_inv!(S"ZY", sZCrY(1, 2)) == apply!(S"ZY", inv(CliffordOperator(sZCrY(1, 2), 2)))
        @test apply_inv!(S"ZZ", sZCrY(1, 2)) == apply!(S"ZZ", inv(CliffordOperator(sZCrY(1, 2), 2)))

        @test apply_inv!(S"XX", sInvZCrY(1, 2)) == apply!(S"XX", inv(CliffordOperator(sInvZCrY(1, 2), 2)))
        @test apply_inv!(S"XY", sInvZCrY(1, 2)) == apply!(S"XY", inv(CliffordOperator(sInvZCrY(1, 2), 2)))
        @test apply_inv!(S"XZ", sInvZCrY(1, 2)) == apply!(S"XZ", inv(CliffordOperator(sInvZCrY(1, 2), 2)))
        @test apply_inv!(S"YX", sInvZCrY(1, 2)) == apply!(S"YX", inv(CliffordOperator(sInvZCrY(1, 2), 2)))
        @test apply_inv!(S"YY", sInvZCrY(1, 2)) == apply!(S"YY", inv(CliffordOperator(sInvZCrY(1, 2), 2)))
        @test apply_inv!(S"YZ", sInvZCrY(1, 2)) == apply!(S"YZ", inv(CliffordOperator(sInvZCrY(1, 2), 2)))
        @test apply_inv!(S"ZX", sInvZCrY(1, 2)) == apply!(S"ZX", inv(CliffordOperator(sInvZCrY(1, 2), 2)))
        @test apply_inv!(S"ZY", sInvZCrY(1, 2)) == apply!(S"ZY", inv(CliffordOperator(sInvZCrY(1, 2), 2)))
        @test apply_inv!(S"ZZ", sInvZCrY(1, 2)) == apply!(S"ZZ", inv(CliffordOperator(sInvZCrY(1, 2), 2)))
        
        @test apply_inv!(S"XX", sSQRTZZ(1, 2)) == apply!(S"XX", inv(CliffordOperator(sSQRTZZ(1, 2), 2)))
        @test apply_inv!(S"XY", sSQRTZZ(1, 2)) == apply!(S"XY", inv(CliffordOperator(sSQRTZZ(1, 2), 2)))
        @test apply_inv!(S"XZ", sSQRTZZ(1, 2)) == apply!(S"XZ", inv(CliffordOperator(sSQRTZZ(1, 2), 2)))
        @test apply_inv!(S"YX", sSQRTZZ(1, 2)) == apply!(S"YX", inv(CliffordOperator(sSQRTZZ(1, 2), 2)))
        @test apply_inv!(S"YY", sSQRTZZ(1, 2)) == apply!(S"YY", inv(CliffordOperator(sSQRTZZ(1, 2), 2)))
        @test apply_inv!(S"YZ", sSQRTZZ(1, 2)) == apply!(S"YZ", inv(CliffordOperator(sSQRTZZ(1, 2), 2)))
        @test apply_inv!(S"ZX", sSQRTZZ(1, 2)) == apply!(S"ZX", inv(CliffordOperator(sSQRTZZ(1, 2), 2)))
        @test apply_inv!(S"ZY", sSQRTZZ(1, 2)) == apply!(S"ZY", inv(CliffordOperator(sSQRTZZ(1, 2), 2)))
        @test apply_inv!(S"ZZ", sSQRTZZ(1, 2)) == apply!(S"ZZ", inv(CliffordOperator(sSQRTZZ(1, 2), 2)))

        @test apply_inv!(S"XX", sInvSQRTZZ(1, 2)) == apply!(S"XX", inv(CliffordOperator(sInvSQRTZZ(1, 2), 2)))
        @test apply_inv!(S"XY", sInvSQRTZZ(1, 2)) == apply!(S"XY", inv(CliffordOperator(sInvSQRTZZ(1, 2), 2)))
        @test apply_inv!(S"XZ", sInvSQRTZZ(1, 2)) == apply!(S"XZ", inv(CliffordOperator(sInvSQRTZZ(1, 2), 2)))
        @test apply_inv!(S"YX", sInvSQRTZZ(1, 2)) == apply!(S"YX", inv(CliffordOperator(sInvSQRTZZ(1, 2), 2)))
        @test apply_inv!(S"YY", sInvSQRTZZ(1, 2)) == apply!(S"YY", inv(CliffordOperator(sInvSQRTZZ(1, 2), 2)))
        @test apply_inv!(S"YZ", sInvSQRTZZ(1, 2)) == apply!(S"YZ", inv(CliffordOperator(sInvSQRTZZ(1, 2), 2)))
        @test apply_inv!(S"ZX", sInvSQRTZZ(1, 2)) == apply!(S"ZX", inv(CliffordOperator(sInvSQRTZZ(1, 2), 2)))
        @test apply_inv!(S"ZY", sInvSQRTZZ(1, 2)) == apply!(S"ZY", inv(CliffordOperator(sInvSQRTZZ(1, 2), 2)))
        @test apply_inv!(S"ZZ", sInvSQRTZZ(1, 2)) == apply!(S"ZZ", inv(CliffordOperator(sInvSQRTZZ(1, 2), 2)))

        @test apply_inv!(S"XX", sSQRTXX(1, 2)) == apply!(S"XX", inv(CliffordOperator(sSQRTXX(1, 2), 2)))
        @test apply_inv!(S"XY", sSQRTXX(1, 2)) == apply!(S"XY", inv(CliffordOperator(sSQRTXX(1, 2), 2)))
        @test apply_inv!(S"XZ", sSQRTXX(1, 2)) == apply!(S"XZ", inv(CliffordOperator(sSQRTXX(1, 2), 2)))
        @test apply_inv!(S"YX", sSQRTXX(1, 2)) == apply!(S"YX", inv(CliffordOperator(sSQRTXX(1, 2), 2)))
        @test apply_inv!(S"YY", sSQRTXX(1, 2)) == apply!(S"YY", inv(CliffordOperator(sSQRTXX(1, 2), 2)))
        @test apply_inv!(S"YZ", sSQRTXX(1, 2)) == apply!(S"YZ", inv(CliffordOperator(sSQRTXX(1, 2), 2)))
        @test apply_inv!(S"ZX", sSQRTXX(1, 2)) == apply!(S"ZX", inv(CliffordOperator(sSQRTXX(1, 2), 2)))
        @test apply_inv!(S"ZY", sSQRTXX(1, 2)) == apply!(S"ZY", inv(CliffordOperator(sSQRTXX(1, 2), 2)))
        @test apply_inv!(S"ZZ", sSQRTXX(1, 2)) == apply!(S"ZZ", inv(CliffordOperator(sSQRTXX(1, 2), 2)))

        @test apply_inv!(S"XX", sInvSQRTXX(1, 2)) == apply!(S"XX", inv(CliffordOperator(sInvSQRTXX(1, 2), 2)))
        @test apply_inv!(S"XY", sInvSQRTXX(1, 2)) == apply!(S"XY", inv(CliffordOperator(sInvSQRTXX(1, 2), 2)))
        @test apply_inv!(S"XZ", sInvSQRTXX(1, 2)) == apply!(S"XZ", inv(CliffordOperator(sInvSQRTXX(1, 2), 2)))
        @test apply_inv!(S"YX", sInvSQRTXX(1, 2)) == apply!(S"YX", inv(CliffordOperator(sInvSQRTXX(1, 2), 2)))
        @test apply_inv!(S"YY", sInvSQRTXX(1, 2)) == apply!(S"YY", inv(CliffordOperator(sInvSQRTXX(1, 2), 2)))
        @test apply_inv!(S"YZ", sInvSQRTXX(1, 2)) == apply!(S"YZ", inv(CliffordOperator(sInvSQRTXX(1, 2), 2)))
        @test apply_inv!(S"ZX", sInvSQRTXX(1, 2)) == apply!(S"ZX", inv(CliffordOperator(sInvSQRTXX(1, 2), 2)))
        @test apply_inv!(S"ZY", sInvSQRTXX(1, 2)) == apply!(S"ZY", inv(CliffordOperator(sInvSQRTXX(1, 2), 2)))
        @test apply_inv!(S"ZZ", sInvSQRTXX(1, 2)) == apply!(S"ZZ", inv(CliffordOperator(sInvSQRTXX(1, 2), 2)))

        @test apply_inv!(S"XX", sSQRTYY(1, 2)) == apply!(S"XX", inv(CliffordOperator(sSQRTYY(1, 2), 2)))
        @test apply_inv!(S"XY", sSQRTYY(1, 2)) == apply!(S"XY", inv(CliffordOperator(sSQRTYY(1, 2), 2)))
        @test apply_inv!(S"XZ", sSQRTYY(1, 2)) == apply!(S"XZ", inv(CliffordOperator(sSQRTYY(1, 2), 2)))
        @test apply_inv!(S"YX", sSQRTYY(1, 2)) == apply!(S"YX", inv(CliffordOperator(sSQRTYY(1, 2), 2)))
        @test apply_inv!(S"YY", sSQRTYY(1, 2)) == apply!(S"YY", inv(CliffordOperator(sSQRTYY(1, 2), 2)))
        @test apply_inv!(S"YZ", sSQRTYY(1, 2)) == apply!(S"YZ", inv(CliffordOperator(sSQRTYY(1, 2), 2)))
        @test apply_inv!(S"ZX", sSQRTYY(1, 2)) == apply!(S"ZX", inv(CliffordOperator(sSQRTYY(1, 2), 2)))
        @test apply_inv!(S"ZY", sSQRTYY(1, 2)) == apply!(S"ZY", inv(CliffordOperator(sSQRTYY(1, 2), 2)))
        @test apply_inv!(S"ZZ", sSQRTYY(1, 2)) == apply!(S"ZZ", inv(CliffordOperator(sSQRTYY(1, 2), 2)))

        @test apply_inv!(S"XX", sInvSQRTYY(1, 2)) == apply!(S"XX", inv(CliffordOperator(sInvSQRTYY(1, 2), 2)))
        @test apply_inv!(S"XY", sInvSQRTYY(1, 2)) == apply!(S"XY", inv(CliffordOperator(sInvSQRTYY(1, 2), 2)))
        @test apply_inv!(S"XZ", sInvSQRTYY(1, 2)) == apply!(S"XZ", inv(CliffordOperator(sInvSQRTYY(1, 2), 2)))
        @test apply_inv!(S"YX", sInvSQRTYY(1, 2)) == apply!(S"YX", inv(CliffordOperator(sInvSQRTYY(1, 2), 2)))
        @test apply_inv!(S"YY", sInvSQRTYY(1, 2)) == apply!(S"YY", inv(CliffordOperator(sInvSQRTYY(1, 2), 2)))
        @test apply_inv!(S"YZ", sInvSQRTYY(1, 2)) == apply!(S"YZ", inv(CliffordOperator(sInvSQRTYY(1, 2), 2)))
        @test apply_inv!(S"ZX", sInvSQRTYY(1, 2)) == apply!(S"ZX", inv(CliffordOperator(sInvSQRTYY(1, 2), 2)))
        @test apply_inv!(S"ZY", sInvSQRTYY(1, 2)) == apply!(S"ZY", inv(CliffordOperator(sInvSQRTYY(1, 2), 2)))
        @test apply_inv!(S"ZZ", sInvSQRTYY(1, 2)) == apply!(S"ZZ", inv(CliffordOperator(sInvSQRTYY(1, 2), 2)))

    end
end