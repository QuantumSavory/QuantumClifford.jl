using Random: AbstractRNG, GLOBAL_RNG


"""
`CircuitCode` is defined by a given encoding circuit `circ`.

- `arrange`: the spatial arrangement of qubits
- `connect`: the gate connectivity, can be `alltoall` or `brickwork`
- `circ`: the encoding circuit
- `encode_qubits`: the qubits to be encoded

Qubit arrangement for different connectivity types:

- For `all-to-all` connectivity, `arrange` is a one-element tuple containing the number of qubits.
- For `brickwork` connectivity, the qubits are arranged as a lattice, and `arrange` contains side length in each dimension.
  For example, a 5Ã—5 lattice will have `arrange = (5, 5)`.

TODO it would be nicer if we can use CartesianIndex for `encode_qubits` in brickworks,
but its conversion to LinearIndex is limited, not supporting non-one step.
"""
struct CircuitCode <: AbstractECC
    arrange::NTuple{N,Int} where {N}
    connect::Union{Val{:alltoall},Val{:brickwork}}
    circ::Vector{QuantumClifford.AbstractOperation}
    encode_qubits::AbstractArray
end

iscss(::Type{CircuitCode}) = nothing

code_n(c::CircuitCode) = prod(c.arrange)

code_k(c::CircuitCode) = length(c.encode_qubits)

function parity_checks(c::CircuitCode)
    n = code_n(c)
    checks = one(Stabilizer, n)[setdiff(1:n, c.encode_qubits)]
    for op in c.circ
        apply!(checks, op)
    end
    checks
end

"""
Random Clifford circuit code.

The code is generated by a random Clifford circuit `circ` that encode a subset of qubits `encode_qubits` into logical qubits.
The connectivity of the random circuit can be either all-to-all [brown2013short](@cite) or brickwork in some dimensions [gullans2021quantum](@cite).
Each gate in the random circuit is a random 2-qubit Clifford gate.
"""
function random_circuit_code end

function random_circuit_code(rng::AbstractRNG, n::Int, connect::Val{:alltoall}, ngates::Int, k::Int)
    CircuitCode((n,), connect, random_all_to_all_clifford_circuit(rng, n, ngates), collect(1:k))
end

function random_circuit_code(n::Int, connect::Val{:alltoall}, ngates::Int, k::Int)
    CircuitCode((n,), connect, random_all_to_all_clifford_circuit(n, ngates), collect(1:k))
end

function random_circuit_code(rng::AbstractRNG, n::Int, connect::Val{:alltoall}, ngates::Int, encode_qubits::AbstractArray)
    CircuitCode((n,), connect, random_all_to_all_clifford_circuit(rng, n, ngates), encode_qubits)
end

function random_circuit_code(n::Int, connect::Val{:alltoall}, ngates::Int, encode_qubits::AbstractArray)
    CircuitCode((n,), connect, random_all_to_all_clifford_circuit(n, ngates), encode_qubits)
end

function random_circuit_code(rng::AbstractRNG, arrange::NTuple{N,Int} where {N}, connect::Val{:brickwork}, nlayers::Int, encode_qubits::AbstractArray)
    CircuitCode(arrange, connect, random_brickwork_clifford_circuit(rng, arrange, nlayers), encode_qubits)
end

function random_circuit_code(arrange::NTuple{N,Int} where {N}, connect::Val{:brickwork}, nlayers::Int, encode_qubits::AbstractArray)
    CircuitCode(arrange, connect, random_brickwork_clifford_circuit(arrange, nlayers), encode_qubits)
end
